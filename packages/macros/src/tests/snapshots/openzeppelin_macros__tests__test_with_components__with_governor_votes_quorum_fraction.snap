---
source: src/tests/test_with_components.rs
expression: result
snapshot_kind: text
---
TokenStream:

#[starknet::contract]
pub mod MyContract {
    use starknet::ContractAddress;

    pub const QUORUM_NUMERATOR: u256 = 600; // 60%

    #[storage]
    pub struct Storage {
        #[substorage(v0)]
        pub governor_votes_quorum_fraction: GovernorVotesQuorumFractionComponent::Storage,
    }

    #[constructor]
    fn constructor(ref self: ContractState, votes_token: ContractAddress) {
        self.governor_votes_quorum_fraction.initializer(votes_token, QUORUM_NUMERATOR);
    }
    use openzeppelin_governance::governor::extensions::GovernorVotesQuorumFractionComponent;

    component!(
        path: GovernorVotesQuorumFractionComponent,
        storage: governor_votes_quorum_fraction,
        event: GovernorVotesQuorumFractionEvent,
    );

    impl GovernorVotesQuorumFractionInternalImpl =
        GovernorVotesQuorumFractionComponent::InternalImpl<ContractState>;
    impl GovernorVotesQuorumFractionGovernorQuorum =
        GovernorVotesQuorumFractionComponent::GovernorQuorum<ContractState>;
    impl GovernorVotesQuorumFractionGovernorVotes =
        GovernorVotesQuorumFractionComponent::GovernorVotes<ContractState>;

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        #[flat]
        GovernorVotesQuorumFractionEvent: GovernorVotesQuorumFractionComponent::Event,
    }
}


Diagnostics:

None

AuxData:

None
