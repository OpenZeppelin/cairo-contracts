---
source: src/tests/test_with_components.rs
expression: result
snapshot_kind: text
---
TokenStream:

#[starknet::contract]
pub mod MyContract {
    #[storage]
    pub struct Storage {
        #[substorage(v0)]
        pub upgradeable: UpgradeableComponent::Storage,
    }

    #[abi(embed_v0)]
    impl UpgradeableImpl of IUpgradeable<ContractState> {
        fn upgrade(ref self: ContractState, new_class_hash: ClassHash) {}
    }
    use openzeppelin_upgrades::UpgradeableComponent;

    component!(path: UpgradeableComponent, storage: upgradeable, event: UpgradeableEvent);

    impl UpgradeableInternalImpl = UpgradeableComponent::InternalImpl<ContractState>;

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        #[flat]
        UpgradeableEvent: UpgradeableComponent::Event,
    }
}


Diagnostics:

====
Warning: It looks like the `self.upgradeable.upgrade(new_class_hash)` function is not used in the contract. If
this is intentional, you may consider removing the Upgradeable component.
====

AuxData:

None
